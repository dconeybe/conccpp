{% set cpp_tests = [
  dict(
    operating_system="linux",
    build_config="Debug",
    compiler=("gcc", "g++"),
    sanitizer="thread",
  ),
  dict(
    operating_system="linux",
    build_config="Release",
    compiler=("gcc", "g++"),
  ),
  dict(
    operating_system="linux",
    build_config="Debug",
    compiler=("clang", "clang++"),
    sanitizer="thread",
  ),
  dict(
    operating_system="linux",
    build_config="Release",
    compiler=("clang", "clang++"),
  ),
  dict(
    operating_system="macos",
    build_config="Debug",
    sanitizer="thread",
  ),
  dict(
    operating_system="macos",
    build_config="Release",
  ),
  dict(
    operating_system="windows",
    build_config="Debug",
    target_architecture="Win32",
  ),
  dict(
    operating_system="windows",
    build_config="Release",
    target_architecture="Win32",
  ),
  dict(
    operating_system="windows",
    build_config="Debug",
    target_architecture="x64",
  ),
  dict(
    operating_system="windows",
    build_config="Release",
    target_architecture="x64",
  ),
]
-%}

{%- macro github_runner_for_operating_system(operating_system) -%}
  {%- if operating_system == "linux" -%}ubuntu-latest
  {%- elif operating_system == "macos" -%}macos-latest
  {%- elif operating_system == "windows" -%}windows-latest
  {%- else -%}{% raise "unknown operating_system: " + operating_system %}
  {%- endif -%}
{%- endmacro -%}

{%- macro common_cmake_configure_flags() -%}
  {%- filter replace_whitespace(" ") -%}
    -DCONCPP_LOG_CMAKE_INFO=YES
    -DCMAKE_COMPILE_WARNING_AS_ERROR=YES
    --log-context
  {%- endfilter -%}
{%- endmacro -%}

{%- macro cpp_test_job_name_for_test_params(params) -%}
  {%- filter replace_whitespace("") -%}
  {% filter lower %}
    cpp-test-
    {$ params.operating_system $}-
    {$ params.build_config $}
    {% if "compiler" in params %}-{$ params.compiler[0] $}{% endif %}
    {% if "target_architecture" in params %}-{$ params.target_architecture $}{% endif %}
  {% endfilter %}
  {%- endfilter -%}
{%- endmacro -%}

{% for params in cpp_tests %}

  {$ cpp_test_job_name_for_test_params(params) $}:
    runs-on: {$ github_runner_for_operating_system(params.operating_system) $}
    steps:
      {% if params.operating_system == "linux" %}
      - run: sudo apt-get install -y ninja-build
      {% elif params.operating_system == "macos" %}
      - run: brew install ninja
      {% endif %}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      {% if params.operating_system == "linux" or params.operating_system == "macos" %}
      - run: cmake -S . -B build -DCMAKE_BUILD_TYPE={$ params.build_config $} -G Ninja {$ common_cmake_configure_flags() $}
      {% if "sanitizer" in params or "compiler" in params %}
        env:
      {% endif %}
      {% if "sanitizer" in params %}
          CXXFLAGS: -fsanitize={$ params.sanitizer $}
      {% endif %}
      {% if "compiler" in params %}
          CC: {$ params.compiler[0] $}
          CXX: {$ params.compiler[1] $}
      {% endif %}
      {% elif params.operating_system == "windows" %}
      - run: cmake -S . -B build -G "Visual Studio 17 2022" -A {$ params.target_architecture $} {$ common_cmake_configure_flags() $}
      {% endif %}
      {% if params.operating_system == "linux" or params.operating_system == "macos" %}
      - run: cmake --build build
      {% elif params.operating_system == "windows" %}
      - run: cmake --build build --config {$ params.build_config $}
      {% endif %}
      {% if params.operating_system == "linux" or params.operating_system == "macos" %}
      - run: ctest --verbose
      {% elif params.operating_system == "windows" %}
      - run: ctest -C {$ params.build_config $} --verbose
      {% endif %}
        working-directory: build
{% endfor %}
