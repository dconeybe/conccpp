{% for params in cpp_tests %}
  cpp-test-{$ params.os_name | lower $}-{$ params.build_config | lower $}{% if params.compiler %}-{$ params.compiler | lower $}{% endif %}{% if params.target_architecture %}-{$ params.target_architecture | lower $}{% endif %}:
    runs-on: {$ params.github_runs_on $}
    steps:
      {% if params.os_name == 'linux' -%}
      - run: sudo apt-get install -y ninja-build
      {%- elif params.os_name == 'macos' -%}
      - run: brew install ninja
      {%- endif %}
      - run: cmake --version
      - uses: actions/checkout@v3
      {% if params.os_name == 'linux' or params.os_name == 'macos' -%}
      - run: cmake -S . -B build -DCMAKE_BUILD_TYPE={$ params.build_config $} -G Ninja -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
      {%- if params.compiler %}
        env:
          CC: {% if params.compiler == "clang" %}clang{% elif params.compiler == "gcc" %}gcc{% endif %}
          CXX: {% if params.compiler == "clang" %}clang++{% elif params.compiler == "gcc" %}g++{% endif %}
      {%- endif %}
      {%- elif params.os_name == 'windows' -%}
      - run: cmake -S . -B build -G "Visual Studio 17 2022" -A {$ params.target_architecture $} -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
      {%- endif %}
{% endfor %}



  cpp-test:
    steps:
      - if: runner.os == 'Linux'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -G Ninja -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
        env:
          CC: ${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
          CXX: ${{ matrix.compiler == 'clang' && 'clang++' || 'g++' }}
      - if: runner.os == 'macOS'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -G Ninja -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
      - if: runner.os == 'Windows'
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.target_architecture }} -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context

      - if: runner.os != 'Windows'
        run: cmake --build build
      - if: runner.os == 'Windows'
        run: cmake --build build --config ${{ matrix.build_config }}

      - if: runner.os != 'Windows'
        run: ctest --verbose
        working-directory: build
      - if: runner.os == 'Windows'
        run: ctest -C ${{ matrix.build_config }} --verbose
        working-directory: build
