{% set cpp_tests = [
  CppTestParameters(
    operating_system=OperatingSystem.LINUX,
    build_config=BuildConfig.DEBUG,
    compiler=Compiler.GCC
  ),
  CppTestParameters(
    operating_system=OperatingSystem.LINUX,
    build_config=BuildConfig.RELEASE,
    compiler=Compiler.GCC,
  ),
  CppTestParameters(
    operating_system=OperatingSystem.LINUX,
    build_config=BuildConfig.DEBUG,
    compiler=Compiler.CLANG,
  ),
  CppTestParameters(
    operating_system=OperatingSystem.LINUX,
    build_config=BuildConfig.RELEASE,
    compiler=Compiler.CLANG,
  ),
  CppTestParameters(
    operating_system=OperatingSystem.MACOS,
    build_config=BuildConfig.DEBUG,
  ),
  CppTestParameters(
    operating_system=OperatingSystem.MACOS,
    build_config=BuildConfig.RELEASE,
  ),
  CppTestParameters(
    operating_system=OperatingSystem.WINDOWS,
    build_config=BuildConfig.DEBUG,
    target_architecture="Win32",
  ),
  CppTestParameters(
    operating_system=OperatingSystem.WINDOWS,
    build_config=BuildConfig.RELEASE,
    target_architecture="Win32",
  ),
  CppTestParameters(
    operating_system=OperatingSystem.WINDOWS,
    build_config=BuildConfig.DEBUG,
    target_architecture="x64",
  ),
  CppTestParameters(
    operating_system=OperatingSystem.WINDOWS,
    build_config=BuildConfig.RELEASE,
    target_architecture="x64",
  ),
] -%}

{%- macro cmake_build_type_for_build_config(build_config) -%}
  {%- if build_config == BuildConfig.RELEASE -%}Release
  {%- elif build_config == BuildConfig.DEBUG -%}Debug
  {%- else -%}ERROR: unknown build_config: {$ build_config $}
  {%- endif -%}
{%- endmacro -%}

{%- macro name_for_operating_system(operating_system) -%}
  {%- if operating_system == OperatingSystem.LINUX -%}linux
  {%- elif operating_system == OperatingSystem.MACOS -%}macos
  {%- elif operating_system == OperatingSystem.WINDOWS -%}windows
  {%- else -%}ERROR: unknown operating_system: {$ operating_system $}
  {%- endif -%}
{%- endmacro -%}

{% macro github_runner_for_operating_system(operating_system) %}
  {%- if operating_system == OperatingSystem.LINUX -%}ubuntu-latest
  {%- elif operating_system == OperatingSystem.MACOS -%}macos-latest
  {%- elif operating_system == OperatingSystem.WINDOWS -%}windows-latest
  {%- else -%}ERROR: unknown operating_system: {$ operating_system $}
  {%- endif -%}
{%- endmacro -%}

{% macro name_for_compiler(compiler) %}
  {%- if compiler == Compiler.GCC -%}gcc
  {%- elif compiler == Compiler.CLANG -%}clang
  {%- else -%}ERROR: unknown compiler: {$ compiler $}
  {%- endif -%}
{%- endmacro -%}

{% macro c_compiler_command_for_compiler(compiler) %}
  {%- if compiler == Compiler.GCC -%}gcc
  {%- elif compiler == Compiler.CLANG -%}clang
  {%- else -%}ERROR: unknown compiler: {$ compiler $}
  {%- endif -%}
{%- endmacro -%}

{% macro cpp_compiler_command_for_compiler(compiler) -%}
  {%- if compiler == Compiler.GCC -%}g++
  {%- elif compiler == Compiler.CLANG -%}clang++
  {%- else -%}ERROR: unknown compiler: {$ compiler $}
  {%- endif -%}
{%- endmacro -%}

{%- macro common_cmake_configure_flags() -%}
-DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
{%- endmacro -%}

{% for params in cpp_tests %}

  {%+ filter lower -%}
    cpp-test-
    {$- name_for_operating_system(params.operating_system) -$}-
    {$- cmake_build_type_for_build_config(params.build_config) -$}
    {%- if params.compiler %}-{$ name_for_compiler(params.compiler) $}{% endif -%}
    {%- if params.target_architecture %}-{$ params.target_architecture $}{% endif -%}
  {%- endfilter %}:
    runs-on: {$ github_runner_for_operating_system(params.operating_system) $}
    steps:
      {% if params.operating_system == OperatingSystem.LINUX %}
      - run: sudo apt-get install -y ninja-build
      {% elif params.operating_system == OperatingSystem.MACOS %}
      - run: brew install ninja
      {% endif %}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      {% if params.operating_system == OperatingSystem.LINUX or params.operating_system == OperatingSystem.MACOS %}
      - run: cmake -S . -B build -DCMAKE_BUILD_TYPE={$ cmake_build_type_for_build_config(params.build_config) $} -G Ninja {$ common_cmake_configure_flags() $}
      {% if params.compiler %}
        env:
          CC: {$ c_compiler_command_for_compiler(params.compiler) $}
          CXX: {$ cpp_compiler_command_for_compiler(params.compiler) $}
      {% endif %}
      {% elif params.operating_system == OperatingSystem.WINDOWS %}
      - run: cmake -S . -B build -G "Visual Studio 17 2022" -A {$ params.target_architecture $} {$ common_cmake_configure_flags() $}
      {% endif %}
      {% if params.operating_system == OperatingSystem.LINUX or params.operating_system == OperatingSystem.MACOS %}
      - run: cmake --build build
      {% elif params.operating_system == OperatingSystem.WINDOWS %}
      - run: cmake --build build --config {$ cmake_build_type_for_build_config(params.build_config) $}
      {% endif %}
      {% if params.operating_system == OperatingSystem.LINUX or params.operating_system == OperatingSystem.MACOS %}
      - run: ctest --verbose
      {% elif params.operating_system == OperatingSystem.WINDOWS %}
      - run: ctest -C {$ cmake_build_type_for_build_config(params.build_config) $} --verbose
      {% endif %}
        working-directory: build
{% endfor %}
