###############################################################################
# WARNING: THIS FILE IS GENERATED!
#
# This file is generated by running the following command in the root directory
# of this Git repository:
#
#   python workflows/checks/generate.py >.github/workflows/checks.yml
#
# Changes made directly to this file will be clobbered when it gets
# regenerated. Instead, modify the template files that are used to generate
# this file.
###############################################################################

name: checks

on:
  push:
    branches: ['**']

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install pyink

      - uses: actions/checkout@v3

      - run: ./scripts/format.sh -c

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install pyflakes

      - uses: actions/checkout@v3

      - run: ./scripts/lint.sh

  generated_checks_yml:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install absl-py Jinja2

      - uses: actions/checkout@v3

      - run: python workflows/checks/generate.py >.github/workflows/checks.yml
      - run: git diff --exit-code

  test:
    strategy:
      fail-fast: false
      matrix:
        runs_on: ['ubuntu-latest', 'macos-latest', 'windows-latest']

    runs-on: ${{ matrix.runs_on }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install absl-py

      - uses: actions/checkout@v3

      - run: ./scripts/test.sh
        shell: bash

  ctest:
    strategy:
      fail-fast: false
      matrix:
        runs_on: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        build_config: ['Debug', 'Release']
        compiler: ['gcc', 'clang', 'msvc']
        target_architecture: ['Win32', 'x64']
        exclude:
          - runs_on: ubuntu-latest
            compiler: msvc
          - runs_on: ubuntu-latest
            target_architecture: Win32
          - runs_on: macos-latest
            compiler: msvc
          - runs_on: macos-latest
            compiler: gcc
          - runs_on: macos-latest
            target_architecture: Win32
          - runs_on: windows-latest
            compiler: gcc
          - runs_on: windows-latest
            compiler: clang

    runs-on: ${{ matrix.runs_on }}
    steps:
      - if: runner.os == 'Linux'
        run: sudo apt-get install -y ninja-build
      - if: runner.os == 'macOS'
        run: brew install ninja

      - uses: actions/checkout@v3
      - run: cmake --version

      - if: runner.os == 'Linux'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -G Ninja -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
        env:
          CC: ${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
          CXX: ${{ matrix.compiler == 'clang' && 'clang++' || 'g++' }}
      - if: runner.os == 'macOS'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -G Ninja -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context
      - if: runner.os == 'Windows'
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.target_architecture }} -DCONCPP_LOG_CMAKE_INFO=YES -DCMAKE_COMPILE_WARNING_AS_ERROR=YES --log-context

      - if: runner.os != 'Windows'
        run: cmake --build build
      - if: runner.os == 'Windows'
        run: cmake --build build --config ${{ matrix.build_config }}

      - if: runner.os != 'Windows'
        run: ctest --verbose
        working-directory: build
      - if: runner.os == 'Windows'
        run: ctest -C ${{ matrix.build_config }} --verbose
        working-directory: build
